package views

import (
	"bytes"
	"github.com/believer/recipes/model"
	"github.com/yuin/goldmark"
	"github.com/yuin/goldmark/extension"
	"github.com/yuin/goldmark/renderer/html"
	"strconv"
)

func MarkdownToHTML(input []byte) string {
	var buf bytes.Buffer

	md := goldmark.New(
		goldmark.WithExtensions(
			extension.Strikethrough,
			extension.Typographer,
			extension.NewFootnote(
				extension.WithFootnoteBacklinkClass([]byte("font-mono no-underline")),
			),
			extension.Table,
		),
		goldmark.WithRendererOptions(
			html.WithXHTML(),
			html.WithUnsafe(),
		),
	)

	if err := md.Convert(input, &buf); err != nil {
		panic(err)
	}

	return buf.String()
}

templ Recipe(recipe model.Recipe, ingredients []model.Ingredient) {
	@Layout() {
		<article class="space-y-8">
			<header class="flex flex-col gap-y-4">
				<div>
					<div class="text-xs uppercase font-medium text-neutral-500">
						{ recipe.CourseType() }
					</div>
					<h1 class="text-3xl font-semibold">
						{ recipe.Name }
					</h1>
				</div>
				<div class="flex gap-x-4 items-center border-t border-b border-neutral-200 py-4">
					<div class="bg-green-100 rounded-lg w-20 h-20 justify-center place-items-center text-green-800 text-sm flex flex-col items-center gap-y-1">
						<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
							<path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path>
						</svg>
						{ strconv.Itoa(recipe.Time) } min
					</div>
					<div class="bg-rose-100 rounded-lg w-20 h-20 justify-center text-rose-800 text-sm flex flex-col items-center gap-y-1">
						<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
							<path stroke-linecap="round" stroke-linejoin="round" d="M9.594 3.94c.09-.542.56-.94 1.11-.94h2.593c.55 0 1.02.398 1.11.94l.213 1.281c.063.374.313.686.645.87.074.04.147.083.22.127.325.196.72.257 1.075.124l1.217-.456a1.125 1.125 0 0 1 1.37.49l1.296 2.247a1.125 1.125 0 0 1-.26 1.431l-1.003.827c-.293.241-.438.613-.43.992a7.723 7.723 0 0 1 0 .255c-.008.378.137.75.43.991l1.004.827c.424.35.534.955.26 1.43l-1.298 2.247a1.125 1.125 0 0 1-1.369.491l-1.217-.456c-.355-.133-.75-.072-1.076.124a6.47 6.47 0 0 1-.22.128c-.331.183-.581.495-.644.869l-.213 1.281c-.09.543-.56.94-1.11.94h-2.594c-.55 0-1.019-.398-1.11-.94l-.213-1.281c-.062-.374-.312-.686-.644-.87a6.52 6.52 0 0 1-.22-.127c-.325-.196-.72-.257-1.076-.124l-1.217.456a1.125 1.125 0 0 1-1.369-.49l-1.297-2.247a1.125 1.125 0 0 1 .26-1.431l1.004-.827c.292-.24.437-.613.43-.991a6.932 6.932 0 0 1 0-.255c.007-.38-.138-.751-.43-.992l-1.004-.827a1.125 1.125 0 0 1-.26-1.43l1.297-2.247a1.125 1.125 0 0 1 1.37-.491l1.216.456c.356.133.751.072 1.076-.124.072-.044.146-.086.22-.128.332-.183.582-.495.644-.869l.214-1.28Z"></path>
							<path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"></path>
						</svg>
						{ recipe.DifficultyText() }
					</div>
					if recipe.Url.Valid {
						<a class="bg-sky-100 rounded-lg w-20 h-20 justify-center text-sky-800 text-sm flex flex-col items-center gap-y-1" href={ templ.URL(recipe.Url.String) } target="_blank" rel="noopener noreferrer">
							<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
								<path stroke-linecap="round" stroke-linejoin="round" d="M13.19 8.688a4.5 4.5 0 0 1 1.242 7.244l-4.5 4.5a4.5 4.5 0 0 1-6.364-6.364l1.757-1.757m13.35-.622 1.757-1.757a4.5 4.5 0 0 0-6.364-6.364l-4.5 4.5a4.5 4.5 0 0 0 1.242 7.244"></path>
							</svg>
							LÃ¤nk
						</a>
					}
				</div>
			</header>
			if recipe.Description.Valid {
				<section class="space-y-4">
					<h2 class="text-lg font-semibold">Instruktioner</h2>
					<div class="markdown">
						@templ.Raw(MarkdownToHTML([]byte(recipe.Description.String)))
					</div>
				</section>
			}
			if len(ingredients) > 0 {
				<section class="space-y-4">
					<h2 class="text-lg font-semibold">Ingredienser</h2>
					<ul class="rounded-lg border border-neutral-200 divide-y divide-neutral-200 bg-neutral-50">
						for _, ingredient := range ingredients {
							<li class="p-4 text-sm flex justify-between">
								<div class="font-medium">
									{ ingredient.Name }
								</div>
								if ingredient.Amount.Valid && ingredient.ServingSize.Valid {
									<div>
										{ ingredient.Amount.String }
										{ ingredient.ServingSize.String }
									</div>
								}
							</li>
						}
					</ul>
				</section>
			}
		</article>
	}
}
